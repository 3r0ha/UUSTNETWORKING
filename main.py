import logging
import asyncio
import aiosqlite

from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage



API_TOKEN = '6835315645:AAGPyEZKih_bTD7uj4N86_pWxKF73z8F0oc'
ADMIN_ID = 989037374


logging.basicConfig(level=logging.INFO)


bot = Bot(token=API_TOKEN)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    name = State()
    faculty = State()
    group = State()
    about_me = State()
    interests = State()
    newname = State()
    newfaculty = State()
    newgroup = State()
    newabout_me = State()
    newinterests = State()
    photo = State()
    edit_name = State()
    edit_faculty = State()
    edit_group = State()
    edit_photo = State()


dp.middleware.setup(LoggingMiddleware())


async def init_db():
    db = await aiosqlite.connect('users.db')
    await db.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        name TEXT,
                        faculty TEXT,
                        group_number TEXT,
                        about_me TEXT,
                        interests TEXT,
                        photo_id TEXT)''')
    await db.commit()
    await db.close()


async def fetch_all_user_ids():
    async with aiosqlite.connect('users.db') as db:
        cursor = await db.execute("SELECT user_id FROM users")
        user_ids = await cursor.fetchall()
        return [user_id[0] for user_id in user_ids]


@dp.message_handler(commands=['post'], user_id = ADMIN_ID)

async def handle_broadcast_command(message: types.Message):
    broadcast_message = message.get_args()
    if not broadcast_message:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.–ù–∞–ø—Ä–∏–º–µ—Ä: /post –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å.")
        return

    user_ids = await fetch_all_user_ids()
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, broadcast_message)
        except Exception as e:
            print(f"Could not send message to {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def delete_user_data(user_id):
    async with aiosqlite.connect('users.db') as db:
        await db.execute("DELETE FROM users WHERE user_id =?", (user_id,))
        await db.commit()


@dp.message_handler(commands=['delete_me'])
async def confirm_delete_user_data(message: types.Message):
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data ="confirm_delete"))
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?", reply_markup = keyboard)


@dp.callback_query_handler(lambda c: c.data =='confirm_delete')
async def process_callback_button_delete(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await delete_user_data(user_id)
    await bot.send_message(user_id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")


                    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start', state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await init_db()
    db = await aiosqlite.connect('users.db')
    res = await db.execute(f'''SELECT * FROM users WHERE user_id = {message.from_user.id}''')
    res = await res.fetchall()
    print(res)
    if res == []:
        await Form.name.set()
        await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤. –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    else:
        kb = [
            [types.KeyboardButton(text="üë®‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [types.KeyboardButton(text="üëÅ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",  reply_markup=keyboard)

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Form.next()
    await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç?")


@dp.message_handler(state=Form.faculty)
async def process_faculty(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['faculty'] = message.text
    await Form.next()
    await message.reply("–í –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ç—ã —É—á–∏—à—å—Å—è?")

@dp.message_handler(state=Form.group)
async def process_faculty(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['group'] = message.text
    await Form.next()
    await message.reply("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ.")

@dp.message_handler(state=Form.about_me)
async def process_faculty(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['about_me'] = message.text
    await Form.next()
    await message.reply("–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. (–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, C++, backend)")


@dp.message_handler(state=Form.interests)
async def process_group(message: types.Message, state: FSMContext):
    interests_lower = message.text.lower()
    async with state.proxy() as data:
        data['interests'] = interests_lower
    await Form.photo.set()
    await message.reply("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ", reply = False)


@dp.message_handler(content_types=['photo'], state=Form.photo)
async def process_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
        db = await aiosqlite.connect('users.db')
        await db.execute('INSERT INTO users (user_id, username, name, faculty, group_number, about_me, interests, photo_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                         (message.from_user.id, message.from_user.username, data['name'], data['faculty'], data['group'],data['about_me'],data['interests'],data['photo']))
        await db.commit()
        await db.close()

    await state.finish()
    kb = [
        [types.KeyboardButton(text="üë®‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="üëÅ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=keyboard)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
async def get_user_data(user_id):
    db = await aiosqlite.connect('users.db')
    cursor = await db.execute('SELECT name, faculty, group_number, photo_id FROM users WHERE user_id = ?', (user_id,))
    row = await cursor.fetchone()
    await cursor.close()
    await db.close()
    return row

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@dp.message_handler(text='üë®‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    if user_data:
        name, faculty, group, about_me, photo_id = user_data
        await bot.send_photo(chat_id=message.chat.id, photo=photo_id, caption=f"üë®‚Äçüíª –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n–ò–º—è: {name}\n–§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty}\n–ì—Ä—É–ø–ø–∞: {group}\n–û —Å–µ–±–µ: {about_me}\n\nüõ† –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n\n/edit_name - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n/edit_faculty - –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç\n/edit_group - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É\n/edit_about - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n/edit_interests - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã\n\nüóë –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_me")
    else:
        await message.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")


async def get_user_data(user_id):
    db = await aiosqlite.connect('users.db')
    cursor = await db.execute('SELECT name, faculty, group_number, about_me, photo_id FROM users WHERE user_id = ?', (user_id,))
    row = await cursor.fetchone()
    await cursor.close()
    await db.close()
    return row


async def get_users_for_search(current_user_id):
    db = await aiosqlite.connect('users.db')
    current_user_interests_query = 'SELECT interests FROM users WHERE user_id = ?'
    cursor = await db.execute(current_user_interests_query, (current_user_id,))
    current_user_interests_row = await cursor.fetchone()
    if current_user_interests_row:
        current_user_interests = current_user_interests_row[0]
    else:
        current_user_interests = ''
    if not current_user_interests:
        matching_users_query = 'SELECT user_id, username, name, faculty, group_number, about_me, interests, photo_id FROM users WHERE 1 = 0'
    else:
        interests_parts = ["interests LIKE '%{}%'".format(interest.strip()) for interest in current_user_interests.split(',')]

        interests_query_part = " OR ".join(interests_parts)

        matching_users_query = f"SELECT user_id, username, name, faculty, group_number, about_me, interests, photo_id FROM users WHERE user_id != ? AND ({interests_query_part})"

    cursor = await db.execute(matching_users_query, (current_user_id,))
    rows = await cursor.fetchall()
    await cursor.close()
    await db.close()
    return rows


@dp.message_handler(text='üëÅ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
async def cmd_search(message: types.Message):
    user_id = message.from_user.id
    users = await get_users_for_search(user_id)
    if users:
        for user in users:
            user_id, username, name, faculty, group, about_me, interests, photo_id = user
            await bot.send_photo(chat_id=message.chat.id, photo=photo_id, caption=f"–ò–º—è: {name}\n–§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty}\n–ì—Ä—É–ø–ø–∞: {group}\n–û —Å–µ–±–µ: {about_me}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã:{interests}\n\n–ï–≥–æ –∞–∫–∫–∞—É–Ω—Ç Telegram: @{username}")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏, –∫–∞–∫ —É –≤–∞—Å üòî")
async def update_user_data(user_id, column, data):
    async with aiosqlite.connect('users.db') as db:
        query = f"UPDATE users SET {column} = ? WHERE user_id = ?"
        await db.execute(query, (data, user_id))
        await db.commit()

@dp.message_handler(commands=['edit_name'], state='*')
async def prompt_name(message: types.Message):
    await Form.newname.set()
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")

@dp.message_handler(state=Form.newname)
async def update_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_name = message.text
    await update_user_data(user_id, "name", new_name)
    await bot.send_message(message.from_user.id, "–í–∞—à–µ –∏–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()
@dp.message_handler(commands=['edit_faculty'], state='*')
async def prompt_faculty(message: types.Message):
    await Form.newfaculty.set()
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")

@dp.message_handler(state=Form.newfaculty)
async def update_faculty(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_faculty = message.text
    await update_user_data(user_id, "faculty", new_faculty)
    await bot.send_message(message.from_user.id, "–í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.finish()
@dp.message_handler(commands=['edit_group'], state='*')
async def prompt_group(message: types.Message):
    await Form.newgroup.set()
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:")

@dp.message_handler(state=Form.newgroup)
async def update_group(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_group = message.text
    await update_user_data(user_id, "group_number", new_group)
    await bot.send_message(message.from_user.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.finish()
@dp.message_handler(commands=['edit_about'], state='*')
async def prompt_about(message: types.Message):
    await Form.newabout_me.set()
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

@dp.message_handler(state=Form.newabout_me)
async def update_about(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_about_me = message.text
    await update_user_data(user_id, "about_me", new_about_me)
    await bot.send_message(message.from_user.id, "–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()
@dp.message_handler(commands=['edit_interests'], state='*')
async def prompt_interests(message: types.Message):
    await Form.newinterests.set()
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

@dp.message_handler(state=Form.newinterests)
async def update_interests(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_interests_lower = message.text.lower()
    await update_user_data(user_id, "interests", new_interests_lower)
    await bot.send_message(message.from_user.id, "–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    await state.finish()

@dp.message_handler(content_types=types.ContentTypes.TEXT, state="*")
async def message_unrecognized(message: types.Message):
    await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ /start")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    